<?xml version="1.0" encoding="UTF-8"?>


<section id="arrays.2" title="Programming  With Arrays">
   
<p><start><big>A</big>rrays are the most basic</start> and the most important
type of data structure, and techniques for processing arrays are among the most
important programming techniques you can learn. Two fundamental array
processing techniques&mdash;searching and sorting&mdash;will be covered in
<localref href="arrays.4"/>. This section introduces some of the basic ideas of
array processing in general.</p>

<subsection id="arrays.2.1" title="Arrays and for Loops">
   
<p>In many cases, processing an array means applying the same operation to each
item in the array. This is commonly done with a <code>for</code> loop. A loop for
processing all the elements of an array <code>A</code> has the form:</p>

<pre>// do any necessary initialization
for (int i = 0; i &lt; A.length; i++) {
   . . . // process A[i]
}</pre>

<p>Suppose, for example, that <code>A</code> is an array of type <atype>double[]</atype>.
Suppose that the goal is to add up all the numbers in the array. An informal
algorithm for doing this would be:</p>

<pre>Start with sum = 0;
Add A[0] to sum;   (process the first item in A)
Add A[1] to sum;   (process the second item in A)
  .
  .
  .
Add A[ A.length - 1 ] to sum;   (process the last item in A)</pre>

<np>Putting the obvious repetition into a loop,
this becomes:</np>

<pre>double sum;  // The sum of the numbers in A.
sum = 0;     // Start with 0.
for (int i = 0; i &lt; A.length; i++)
   sum += A[i];  // add A[i] to the sum, for
                 //     i = 0, 1, ..., A.length - 1</pre>

<np>Note that the continuation condition, "<code>i &lt; A.length</code>", implies
that the last value of <code>i</code> that is actually processed is
<code>A.length-1</code>, which is the index of the final item in the array. It's
important to use "<code>&lt;</code>" here, not "<code>&lt;=</code>", since
"<code>&lt;=</code>" would give an array index out of bounds error.
There is no element at position <code>A.length</code> in&nbsp;<code>A</code>.</np>

<p>Eventually, you should just about be able to write loops similar to this one
in your sleep. I will give a few more simple examples. Here is a loop that will
count the number of items in the array <code>A</code> which are less than zero:</p>

<pre>int count;  // For counting the items.
count = 0;  // Start with 0 items counted.
for (int i = 0; i &lt; A.length; i++) {
   if (A[i] &lt; 0.0)   // if this item is less than zero...
      count++;       //     ...then count it
}
// At this point, the value of count is the number
// of items that have passed the test of being &lt; 0</pre>

<p>Replace the test "<code>A[i] &lt; 0.0</code>", if you want to count the number
of items in an array that satisfy some other property. Here is a variation on
the same theme. Suppose you want to count the number of times that an item in
the array <code>A</code> is equal to the item that follows it. The item that
follows <code>A[i]</code> in the array is <code>A[i+1]</code>, so the test in this case
is "<code>if (A[i] == A[i+1])</code>". But there is a catch: This test cannot be
applied when <code>A[i]</code> is the last item in the array, since then there is
no such item as <code>A[i+1]</code>. The result of trying to apply the test in this
case would be an <classname>ArrayIndexOutOfBoundsException</classname>. This just means that we have
to stop one item short of the final item:</p>

<pre>
int count = 0;
for (int i = 0; i &lt; <newcode>A.length - 1</newcode>; i++) {
   if (A[i] == A[i+1])
      count++;
}</pre>

<p>Another typical problem is to find the largest number in <code>A</code>. The
strategy is to go through the array, keeping track of the largest number found
so far. We'll store the largest number found so far in a variable called
<code>max</code>. As we look through the array, whenever we find a number larger
than the current value of <code>max</code>, we change the value of <code>max</code> to
that larger value. After the whole array has been processed, <code>max</code> is
the largest item in the array overall. The only question is, what should the
original value of <code>max</code> be? One possibility is to start with
<code>max</code> equal to <code>A[0]</code>, and then to look through the rest of the
array, starting from <code>A[1]</code>, for larger items:</p>

<pre>double max = A[0];
for (<newcode>int i = 1</newcode>; i &lt; A.length; i++) {
   if (A[i] &gt; max)
      max = A[i];
}
// at this point, max is the largest item in A</pre>

<np>(There is one subtle problem here. It's possible in Java for an array to
have length zero. In that case, <code>A[0]</code> doesn't exist, and the reference
to <code>A[0]</code> in the first line gives an array index out of bounds error.
However, zero-length arrays are normally something that you want to avoid in
real problems. Anyway, what would it mean to ask for the largest item in an
array that contains no items at all?)</np>

<p>As a final example of basic array operations, consider the problem of
copying an array. To make a copy of our sample array <code>A</code>, it is
<b>not</b> sufficient to say</p>

<pre>double[] B = A;</pre>

<np>since this does not create a new array object. All it does is declare a new
array variable and make it refer to the same object to which <code>A</code> refers.
(So that, for example, a change to <code>A[i]</code> will automatically change
<code>B[i]</code> as well.) Remember that arrays are objects, and array variables 
hold pointers to objects; the assignment <code>B&nbsp;=&nbsp;A</code> just copies
a pointer.   To make a new array that is a copy of <code>A</code>, it is
necessary to make a new array object and to copy each of the individual items
from <code>A</code> into the new array:</np>

<pre>double[] B = new double[A.length]; // Make a new array object,
                                   //   the same size as A.
for (int i = 0; i &lt; A.length; i++)
   B[i] = A[i];   // Copy each item from A to B.</pre>

<p>Copying values from one array to another is such a common operation that
Java has a predefined subroutine to do it. The subroutine,
<code>System.arraycopy()</code>, is a static method in the standard
<code>System</code> class. Its declaration has the form</p>

<pre>public static void arraycopy(Object sourceArray, int sourceStartIndex,
        Object destArray, int destStartIndex, int count)</pre>

<np>where <code>sourceArray</code> and <code>destArray</code> can be arrays with any
base type. Values are copied from <code>sourceArray</code> to <code>destArray</code>.
The <code>count</code> tells how many elements to copy. Values are taken from
<code>sourceArray</code> starting at position <code>sourceStartIndex</code> and are
stored in <code>destArray</code> starting at position <code>destStartIndex</code>. For
example, to make a copy of the array, <code>A</code>, using this subroutine, you
would say:</np>

<pre>double B = new double[A.length];
System.arraycopy( A, 0, B, 0, A.length );</pre>

</subsection>
   
<subsection id="arrays.2.2" title="Arrays and for-each Loops">
   
<p>Java 5.0 introduced a new form of the <code>for</code> loop, the
"for-each loop" that was discussed in <localref href="control.4.4"/>.
The for-each loop is meant specifically for processing all the values
in a data structure.  When used to process an array, a for-each loop
can be used to perform the same operation on each value that is stored
in the array.  If <code>anArray</code> is an array of type <atype>BaseType[]</atype>,
then a for-each loop for <code>anArray</code> has the form:</p>
   
<pre>for ( BaseType item : anArray ) {
   .
   .  // process the item
   .
}</pre>
   
<np>In this loop, <code>item</code> is the loop control variable.  It is being
declared as a variable of type <classname>BaseType</classname>, where
<classname>BaseType</classname> is the base type of the array.  (In a
for-each loop, the loop control variable <b>must</b> be declared in the
loop.)  When this loop is executed, each value from the array is assigned
to <code>item</code> in turn and the body of the loop is executed for each
value.  Thus, the above loop is exactly equivalent to:</np>
   
<pre>for ( int index = 0; index &lt; anArray.length; index++ ) {
   BaseType item;
   item = anArray[index];  // Get one of the values from the array
     .
     .  // process the item
     .  
}</pre>
   
<p>For example, if <code>A</code> is an array of type <atype>int[]</atype>, then
we could print all the values from <code>A</code> with the for-each loop:</p>
   
<pre>
for ( int item : A )
   System.out.println( item );
</pre>

<np>and we could add up all the positive integers in <code>A</code> with:</np>
   
<pre>int sum = 0;   // This will be the sum of all the positive numbers in A
for ( int item : A ) {
   if (item &gt; 0)
      sum = sum + item;
}</pre>
   
<p>The for-each loop is not always appropriate.  For example, there is no
simple way to use it to process the items in just a part of an array.
However, it does make it a little easier to process all the values in an array,
since it eliminates any need to use array indices.</p>   
   
<p>It's important to note that a for-each loop processes the <b>values</b> in
the array, not the <b>elements</b> (where an element means the actual memory
location that is part of the array).  For example, consider the following
incorrect attempt to fill an array of integers with 17's:</p>
   
<pre>int[] intList = new int[10];
for ( int item : intList ) {   <newcode>// INCORRECT! DOES NOT MODIFY THE ARRAY!</newcode>
   item = 17;
}</pre>
   
<np>The assignment statement <code>item = 17</code> assigns the value 17 to
the loop control variable, <code>item</code>.  However, this has nothing to
do with the array.  When the body of the loop is executed, the
value from one of the elements of the array is copied into <code>item</code>.
The statement <code>item&nbsp;=&nbsp;17</code> replaces that copied value
but has no effect on the array element from which it was copied; the
value in the array is not changed.</np>
   
</subsection>
   
<subsection id="arrays.2.3" title="Array Types in Subroutines">

<p>Any array type, such as <atype>double[]</atype>, is a full-fledged Java type, so it
can be used in all the ways that any other Java type can be used. In
particular, it can be used as the type of a formal parameter in a subroutine.
It can even be the return type of a function. For example, it might be useful
to have a function that makes a copy of an array of <code>double</code>:</p>

<pre>/**
 *  Create a new array of doubles that is a copy of a given array.
 *  @param source the array that is to be copied; the value can be null
 *  @return a copy of source; if source is null, then the return value is also null
 */
public static double[]  copy( double[] source ) {
    if ( source == null )
       return null;
    double[]  cpy;  // A copy of the source array.
    cpy = new double[source.length];
    System.arraycopy( source, 0, cpy, 0, source.length );
    return cpy;
}</pre>

<p>The <code>main()</code> routine of a program has a parameter of type
<atype>String[]</atype>. You've seen this used since all the way back in 
<localref href="basics.1"/>, but I haven't really been able to explain it
until now. The parameter to the <code>main()</code> routine is an array of
<classname>Strings</classname>. When the system calls the <code>main()</code> routine, 
it passes an actual array of strings, which becomes the value of this parameter.
Where do the strings come from?  The
strings in the array are the <newword>command-line arguments</newword> from the
command that was used to run the program.
When using a command-line interface, the user types a
command to tell the system to execute a program. The user can include extra
input in this command, beyond the name of the program. This extra input becomes
the command-line arguments. For example, if the name of the class that
contains the <code>main()</code> routine is <code>myProg</code>, then the user can type
"<code>java&nbsp;myProg</code>" to execute the program. In this case, there are no
command-line arguments. But if the user types the command</p>
   
<pre>java myProg one two three</pre>

<np>then the command-line arguments are the strings "one", "two",
and "three". The system puts these strings into an array of <classname>Strings</classname>
and passes that array as a parameter to the <code>main()</code> routine. Here, for
example, is a short program that simply prints out any command line arguments
entered by the user:</np>

<pre>public class CLDemo {
   
   public static void main(String[] args) {
      System.out.println("You entered " + args.length
                                  + " command-line arguments");
      if (args.length &gt; 0) {
         System.out.println("They were:");
         for (int i = 0; i &lt; args.length; i++)
            System.out.println("   " + args[i]);
      }
   } // end main()
   
} // end class CLDemo</pre>

<np>Note that the parameter, <code>args</code>, is never <code>null</code> when
<code>main()</code> is called by the system, but it might be an array of length
zero.</np>

<p>In practice, command-line arguments are often the names of files to be
processed by the program. I will give some examples of this in 
<localref href="IO"/>, when I discuss file processing.</p>

</subsection>
   
<subsection id="arrays.2.4" title="Random Access">

<p>So far, all my examples of array processing have used <newword>sequential access</newword>. 
That is, the elements of the array were
processed one after the other in the sequence in which they occur in the array.
But one of the big advantages of arrays is that they allow <newword>random access</newword>. 
That is, every element of the array is equally accessible at any given time.</p>

<p>As an example, let's look at a well-known problem called the birthday
problem: Suppose that there are <code>N</code> people in a room. What's the chance
that there are two people in the room who have the same birthday? (That is,
they were born on the same day in the same month, but not necessarily in the
same year.) Most people severely underestimate the probability. We will actually
look at a different version of the question:  Suppose you choose people at random
and check their birthdays. How many people will you check before you find one
who has the same birthday as someone you've already checked? Of course, the
answer in a particular case depends on random factors, but we can simulate the
experiment with a computer program and run the program several times to get an
idea of how many people need to be checked on average.</p>

<p>To simulate the experiment, we need to keep track of each birthday that we
find. There are 365 different possible birthdays. (We'll ignore leap years.)
For each possible birthday, we need to keep track of whether or not we
have already found a person who has that birthday.
The answer to this question is a boolean value, true or false. To hold the data
for all 365 possible birthdays, we can
use an array of 365 boolean values:</p>

<pre>boolean[] used; 
used = new boolean[365];</pre>

<p>The days of the year are numbered from 0 to 364. The value of
<code>used[i]</code> is true if someone has been selected whose birthday is day
number <code>i</code>. Initially, all the values in the array, <code>used</code>, are
false. When we select someone whose birthday is day number <code>i</code>, we first
check whether <code>used[i]</code> is true. If it is true, then this is the second person
with that birthday. We are done. If <code>used[i]</code> is false, we set
<code>used[i]</code> to be true to record the fact that we've encountered someone
with that birthday, and we go on to the next person. Here is a subroutine that
carries out the simulated experiment (of course, in the subroutine, there are
no simulated people, only simulated birthdays):</p>

<pre>/**
 * Simulate choosing people at random and checking the day of the year they 
 * were born on.  If the birthday is the same as one that was seen previously, 
 * stop, and output the number of people who were checked.
 */
private static void birthdayProblem() {

   boolean[] used;  // For recording the possible birthdays
                    //   that have been seen so far.  A value
                    //   of true in used[i] means that a person
                    //   whose birthday is the i-th day of the
                    //   year has been found.

   int count;       // The number of people who have been checked.

   used = new boolean[365];  // Initially, all entries are false.
   
   count = 0;

   while (true) {
          // Select a birthday at random, from 0 to 364.
          // If the birthday has already been used, quit.
          // Otherwise, record the birthday as used.
      int birthday;  // The selected birthday.
      birthday = (int)(Math.random()*365);
      count++;
      if ( used[birthday] )  // This day was found before; It's a duplicate.
         break;
      used[birthday] = true;
   }

   System.out.println("A duplicate birthday was found after " 
                                             + count + " tries.");

} // end birthdayProblem()</pre>

<np>This subroutine makes essential use of the fact that every element in a
newly created array of <ptype>boolean</ptype> is set to be <code>false</code>. If we
wanted to reuse the same array in a second simulation, we would have to reset
all the elements in it to be <code>false</code> with a <code>for</code> loop:</np>

<pre>for (int i = 0; i &lt; 365; i++)
    used[i] = false;</pre>
   
<texdiv><p>The sample program that uses this subroutine is <sourceref href="BirthdayProblemDemo.java"/>.
An applet version of the program can be found in the online version
of this section.</p></texdiv>

<webdiv>
<p>Here is an applet that will run the simulation as many times as you like.
Are you surprised at how few people have to be chosen, in general?</p>

<applet code="BirthdayProblemDemoConsole.class" archive="BirthdayProblem.jar" width="550" height="275" 
   alt="(Applet 'BirthdayProblemConsole' should be displayed here.)"/>
</webdiv>

</subsection>
   
<subsection id="arrays.2.5" title="Arrays of Objects">

<p>One of the examples in <localref href="GUI1.4.2"/> was an applet
that shows multiple copies of a message in random positions, colors, and fonts.
When the user clicks on the applet, the positions, colors, and fonts are
changed to new random values. Like several other examples from that chapter,
the applet had a flaw: It didn't have any way of storing the data that would be
necessary to redraw itself.  Arrays provide us with one possible solution to this
problem.  We can write a new version of the RandomStrings applet that uses
an array to store the position, font, and color of each string. When the content pane
of the applet is painted, this information is used to draw the strings,
so the applet will paint itself correctly whenever it has to be redrawn.
When the user clicks on the applet, the array is filled with new
random values and the applet is repainted using the new data.  So, the
only time that the picture will change is in response to a mouse click.
<web>Here is the new version of the applet:</web></p>

<webdiv><applet code="RandomStringsWithArray.class" archive="RandomStringsWithArray.jar"
   width="250" height="160" 
   alt="(Applet 'RandomStringsWithArray' should be displayed here.)"/></webdiv>

<p>In this applet, the number of copies of the message is given by a named
constant, <code>MESSAGE_COUNT</code>. One way to store the position, color, and
font of <code>MESSAGE_COUNT</code> strings would be to use four arrays:</p>

<pre>int[] x = new int[MESSAGE_COUNT];  
int[] y = new int[MESSAGE_COUNT];
Color[] color = new Color[MESSAGE_COUNT];
Font[] font = new Font[MESSAGE_COUNT];</pre>

<np>These arrays would be filled with random values. In the
<code>paintComponent()</code> method, the <code>i</code>-th copy of the string would be
drawn at the point <code>(x[i],y[i])</code>. Its color would be given by
<code>color[i]</code>. And it would be drawn in the font <code>font[i]</code>. This
would be accomplished by the <code>paintComponent()</code> method</np>

<pre>public void paintComponent(Graphics g) {
   super.paintComponent(); // (Fill with background color.)
   for (int i = 0; i &lt; MESSAGE_COUNT; i++) {
      g.setColor( color[i] );
      g.setFont( font[i] );
      g.drawString( message, x[i], y[i] );
   }
}</pre>

<np>This approach is said to use <newword>parallel arrays</newword>.
The data for a given copy of the message is spread out across several arrays.
If you think of the arrays as laid out in parallel columns&mdash;array <code>x</code>
in the first column, array <code>y</code> in the second, array <code>color</code> in
the third, and array <code>font</code> in the fourth&mdash;then the data for the
<code>i</code>-th string can be found along the <code>i</code>-th row. There is
nothing wrong with using parallel arrays in this simple example, but it does go
against the object-oriented philosophy of keeping related data in one object.
If we follow this rule, then we don't have to <b>imagine</b> the relationship
among the data, because all the data for one copy of the message is physically
in one place. So, when I wrote the applet, I made a simple class to represent
all the data that is needed for one copy of the message:</np>

<pre>/**
 * An object of this type holds the position, color, and font
 * of one copy of the string.
 */
private static class StringData {
   int x, y;     // The coordinates of the left end of baseline of string.
   Color color;  // The color in which the string is drawn.
   Font font;    // The font that is used to draw the string.
}</pre>

<np>(This class is actually defined as a static nested class in the main applet
class.) To store the data for multiple copies of the message, I use an array of
type <atype>StringData[]</atype>. The array is declared as an instance variable, with
the name <code>stringData</code>:</np>

<pre>StringData[] stringData;</pre>

<np>Of course, the value of <code>stringData</code> is <code>null</code> until an actual array
is created and assigned to it. This is done in the <code>init()</code> method of
the applet with the statement</np>

<pre>stringData = new StringData[MESSAGE_COUNT];</pre>

<np>The base type of this array is <classname>StringData</classname>, which is a class.
We say that <code>stringData</code> is an <newword>array of objects</newword>.
This means that the elements of the array are variables of type  <classname>StringData</classname>.
Like any object variable, each element of the array can either be <code>null</code> or can
hold a reference to an object.  (Note that the term "array of objects" is a little misleading,
since the objects are not in the array; the array can only contain references to objects.)
When the <code>stringData</code>
array is first created, the value of each element in the array is
<code>null</code>.</np>
<p>The data needed by the RandomStrings program will be stored
in objects of type <classname>StringData</classname>,
but no such objects exist yet.  All we have so far is an array of variables that are
capable of referring to such objects. I decided to create the <classname>StringData</classname> objects in the
applet's <code>init</code> method. (It could be done in other places&mdash;just so
long as we avoid trying to use an object that doesn't exist. This is
important: Remember that a newly created array whose base type is an object
type is always filled with <code>null</code> elements. There are <b>no</b>
objects in the array until you put them there.) The objects are created with
the <code>for</code> loop</p>

<pre>for (int i = 0; i &lt; MESSAGE_COUNT; i++)
    stringData[i] = new StringData();</pre>

<p>For the RandomStrings applet, the idea is to store data for the <code>i</code>-th copy of the message in
the variables <code>stringData[i].x</code>, <code>stringData[i].y</code>, <code>stringData[i].color</code>,
and <code>stringData[i].font</code>. Make sure that you understand the notation here:
<code>stringData[i]</code> refers to an object. That object contains instance variables.
The notation <code>stringData[i].x</code> tells the computer: "Find your way to the
object that is referred to by <code>stringData[i]</code>. Then go to the instance
variable named <code>x</code> in that object." Variable names can get even more
complicated than this, so it is important to learn how to read them.
Using the array, <code>stringData</code>, the
<code>paintComponent()</code> method for the applet could be written</p>

<pre>public void paintComponent(Graphics g) {
   super.paintComponent(g); // (Fill with background color.)
   for (int i = 0; i &lt; MESSAGE_COUNT; i++) {
      g.setColor( <newcode>stringData[i].</newcode>color );
      g.setFont( <newcode>stringData[i].</newcode>font );
      g.drawString( message, <newcode>stringData[i].</newcode>x, <newword>stringData[i].</newword>y );
   }
}</pre>
   
<np>However, since the <code>for</code> loop is processing every value in the
array, an alternative would be to use a for-each loop:</np>
   
<pre>public void paintComponent(Graphics g) {
   super.paintComponent(g);
   for ( StringData data : stringData) {
          // Draw a copy of the message in the position, color, 
          // and font stored in data.
      g.setColor( data.color );
      g.setFont( data.font );
      g.drawString( message, data.x, data.y );
   }
}</pre>
   
<np>In this loop, the loop control variable, <code>data</code>, holds a copy of one
of the values from the array.  That value is a reference to an object of type
<classname>StringData</classname>, which has instance variables named
<code>color</code>, <code>font</code>, <code>x</code>, and <code>y</code>.
Once again, the use of a for-each loop has eliminated the need to work with
array indices.</np>

<p>There is still the matter of filling the array, <code>data</code>, with random
values. If you are interested, you can look at the source code for the applet,
<sourceref href="RandomStringsWithArray.java"/>.</p>

<break/>

<p>The RandomStrings applet uses one other array of objects. The font for a given copy of the
message is chosen at random from a set of five possible fonts. In the original
version of the applet, there were five variables of type <classname>Font</classname> to
represent the fonts. The variables were named <code>font1</code>, <code>font2</code>,
<code>font3</code>, <code>font4</code>, and <code>font5</code>. To select one of these
fonts at random, a <code>switch</code> statement could be used:</p>

<pre>Font randomFont;  // One of the 5 fonts, chosen at random.
int rand;         // A random integer in the range 0 to 4.

rand = (int)(Math.random() * 5);
switch (rand) {
   case 0:
      randomFont = font1;
      break;
   case 1:
      randomFont = font2;
      break;
   case 2:
      randomFont = font3;
      break;
   case 3:
      randomFont = font4;
      break;
   case 4:
      randomFont = font5;
      break;
}</pre>

<np>In the new version of the applet, the five fonts are stored in an array,
which is named <code>fonts</code>. This array is declared as an instance
variable of type <atype>Font[]</atype></np>

<pre>Font[] fonts;</pre>

<np>The array is created in the <code>init()</code>
method of the applet, and each element of the array is set
to refer to a new <classname>Font</classname> object:</np>

<pre>fonts = new Font[5];  // Create the array to hold the five fonts.
 
fonts[0] = new Font("Serif", Font.BOLD, 14);
fonts[1] = new Font("SansSerif", Font.BOLD + Font.ITALIC, 24);
fonts[2] = new Font("Monospaced", Font.PLAIN, 20);
fonts[3] = new Font("Dialog", Font.PLAIN, 30);
fonts[4] = new Font("Serif", Font.ITALIC, 36);</pre>

<np>This makes it much easier to select one of the fonts at random. It can be
done with the statements</np>

<pre>Font randomFont;  // One of the 5 fonts, chosen at random.
int fontIndex;    // A random number in the range 0 to 4.
fontIndex = (int)(Math.random() * 5);
randomFont = fonts[ fontIndex ];</pre>

<np>The <code>switch</code> statement has been replaced by a single line of code.
In fact, the preceding four lines could be replaced by the single line:</np>
   
<pre>Font randomFont = fonts[ (int)(Math.random() * 5) ];</pre>
   
<p>This is a very typical application of arrays. Note that this example uses
the random access property of arrays:  We can pick an array index at random
and go directly to the array element at that index.</p>

<p>Here is another example of the
same sort of thing. Months are often stored as numbers 1, 2, 3, &dots;, 12.
Sometimes, however, these numbers have to be translated into the names January,
February, &dots;, December. The translation can be done with an array. The array
can be declared and initialized as</p>

<pre>static String[] monthName = { "January", "February", "March",
                              "April",   "May",      "June",
                              "July",    "August",   "September",
                              "October", "November", "December" };</pre>

<np>If <code>mnth</code> is a variable that holds one of the integers 1 through 12,
then <code>monthName[mnth-1]</code> is the name of the corresponding month. We need
the "<code>-1</code>" because months are numbered starting from 1, while array
elements are numbered starting from 0. Simple array indexing does the
translation for us!</np>
   
</subsection>
   
<subsection id="arrays.2.6" title="Variable Arity Methods">
   
<p>Arrays are used in the implementation of a feature that was introduced in
Java&nbsp;5.0.  Before version 5.0, every method in Java had a fixed arity.
(The <newword>arity</newword> of a subroutine is defined as the number
of parameters in a call to the method.)  In a fixed arity method, the number
of parameters must be the same in every call to the method.  Java 5.0 introduced
<newword>variable arity methods</newword>.  In a variable arity method, different
calls to the method can have different numbers of parameters.  For example,
the formatted output method <code>System.out.printf</code>, which was introduced
in <localref href="basics.4.4"/>, is a variable arity method.  The first
parameter of <code>System.out.printf</code> must be a <classname>String</classname>,
but it can have any number of additional parameters, of any types.</p>

<p>Calling a variable arity method is no different from calling any other
sort of method, but writing one requires some new syntax.  As an example,
consider a method that can compute the average of any number of values of
type <ptype>double</ptype>.  The definition of such a method could begin
with:</p>
   
<pre>public static double average( double...  numbers ) {</pre>
   
<np>Here, the <code>...</code> after the type name, <code>double</code>, indicates
that any number of values of type <ptype>double</ptype> can be provided when
the subroutine is called, so that for example <code>average(1,4,9,16)</code>, 
<code>average(3.14,2.17)</code>, <code>average(0.375)</code>, and even
<code>average()</code> are all legal calls to this method.  Note that 
actual parameters of type <ptype>int</ptype> can be passed to <code>average</code>.
The integers will, as usual, be automatically converted to real numbers.</np>
      
<p>When the method is called, the values of all the actual parameters
that correspond to the variable arity parameter are placed into an array,
and it is this array that is actually passed to the method.  That is,
in the body of a method, a variable arity parameter of type
<classname>T</classname> actually looks like an ordinary parameter of type
<atype>T[]</atype>.  The length of the array tells you how many actual parameters
were provided in the method call.  In the <code>average</code> example, the body
of the method would see an array named <code>numbers</code> of type <atype>double[]</atype>.
The number of actual parameters in the method call would be <code>numbers.length</code>,
and the values of the actual parameters would be <code>numbers[0]</code>,
<code>numbers[1]</code>, and so on.  A complete definition of the method would be:
</p>
   
<pre>public static double average( double... numbers ) {
   double sum;      // The sum of all the actual parameters.
   double average;  // The average of all the actual parameters.
   sum = 0;
   for (int i = 0; i &lt; numbers.length; i++) {
      sum = sum + numbers[i];  // Add one of the actual parameters to the sum.
   }
   average = sum / numbers.length;
   return average;
}</pre>

<p>Note that the "<code>...</code>" can be applied only to the <b>last</b> formal parameter
in a method definition.  Note also that it is possible to pass an actual array
to the method, instead of a list of individual values.  For example, if
<code>salesData</code> is a variable of type <atype>double[]</atype>, then
it would be legal to call <code>average(salesData)</code>, and this would compute
the average of all the numbers in the array.</p>
   
<p>As another example, consider a method that can draw a polygon through
any number of points.  The points are given as values of type <classname>Point</classname>,
where an object of type <classname>Point</classname> has two instance variables,
<code>x</code> and <code>y</code>, of type <ptype>int</ptype>.
In this case, the method has one ordinary parameter&mdash;the
graphics context that will be used to draw the polygon&mdash;in addition to the
variable arity parameter:</p>
   
<pre>public static void drawPolygon(Graphics g, Point... points) {
    if (points.length &gt; 1) {  // (Need at least 2 points to draw anything.)
       for (int i = 0; i &lt; points.length - 1; i++) {
           // Draw a line from i-th point to (i+1)-th point
           g.drawLine( points[i].x, points[i].y, points[i+1].x, points[i+1].y );
       }
       // Now, draw a line back to the starting point.
       g.drawLine( points[points.length-1].x, points[points.length-1].y,
                       points[0].x, points[0].y );
    }
}</pre>
   
<p>Because of automatic type conversion, a variable arity parameter of type
"<code>Object...</code>" can take actual parameters of any type whatsoever.
Even primitive type values are allowed, because of autoboxing.  (A primitive
type value belonging to a type such as <ptype>int</ptype> is converted to
an object belonging to a "wrapper" class such as <classname>Integer</classname>.
See <localref href="OOP.3.2"/>.)  For example, the method definition for
<code>System.out.printf</code> could begin:</p>
   
<pre>public void printf(String format, Object... values) {</pre>

<np>This allows the <code>printf</code> method to output values of any type.
Similarly, we could write a method that strings together the string representations
of all its parameters into one long string:</np>

<pre>public static String concat( Object... values ) {
   StringBuffer buffer;  // Use a StringBuffer for more efficient concatenation.
   buffer = new StringBuffer();  // Start with an empty buffer.
   for ( Object obj : values ) { // A "for each" loop for processing the values.
       buffer.append(obj); // Add string representation of obj to the buffer.
   }
   return buffer.toString(); // return the contents of the buffer
}</pre>
   
</subsection>

</section>