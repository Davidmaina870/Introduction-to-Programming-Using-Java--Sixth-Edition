<?xml version="1.0" encoding="UTF-8"?>


<quiz>

<question>
<ques><p>What does the computer do
when it executes the following statement? Try to give as complete an answer as
possible.</p>
<pre>Color[]  palette  =  new  Color[12];</pre>
</ques>
<ans><p>This is a declaration statement,
that declares and initializes a variable named <code>palette</code> of type
<atype>Color[]</atype>. The initial value of this variable is a newly created array
that has space for 12 items. To be specific about what the computer does: It
creates a new 12-element array object on the heap, and it fills each space in
that array with <code>null</code>. It allocates  memory space for the variable,
<code>palette</code>. And it stores a pointer to the new array object in that
memory space.</p></ans>
</question>


<question>
<ques><p>What is meant by the <i>basetype</i> of an array?</p>
</ques>
<ans><p>The base type of an array refers
to the type of the items that can be stored in that array. For example, the
base type of the array in the previous problem is <code>Color</code>.</p>
</ans>
</question>
   
   
<question>
<ques><p>What does it mean to sort an array?</p>
</ques>
<ans><p>To sort an array means to
rearrange the items in the array so that they are in increasing or decreasing
order (according to some criterion).</p>
</ans>
</question>


<question>
<ques><p>What is the main advantage of binary search over linear search?  What is the
main disadvantage?</p></ques>
<ans><p>The advantage of binary search is that it is much faster.  On a list of
one million items, linear search would take an average of five hundred thousand steps to find an
item, whereas binary search would take only 20 steps.  The disadvantage is that
binary search only works on a sorted list, so some extra work must be done to
sort the list or to keep the list in sorted order as it is created.</p></ans>
</question>


<question>
<ques><p>What is meant by a
<i>dynamic array?</i> What is the advantage of a dynamic array over a regular
array?</p></ques>
<ans><p>A dynamic array is like an array
in that it is a data structure that stores a sequence of items, all of the same
type, in numbered locations. It is different from an array in that there is no
preset upper limit on the number of items that it can contain. This is an
advantage in situations where a reasonable value for the size of the array is
not known at the time it is created.</p></ans>
</question>
   

<question>
<ques><p>Suppose that a variable <code>strlst</code> has been declared as</p>
<pre>ArrayList&lt;String&gt; strlst = new ArrayList&lt;String&gt;();</pre>
<np>Assume that the list is not empty and that all the items in the list
are non-null. Write a code segment that will find and print the string in the list
that comes first in lexicographic order.  How would your answer change
if <code>strlst</code> were declared to be of type <classname>ArrayList</classname>
instead of <atype>ArrayList&lt;String&gt;</atype>?</np>
</ques> 
<ans><p>Strings can be compared for lexicographic order using the <code>compareTo</code>
instance method in the <classname>String</classname> class.
We can find the smallest string as follows:</p>
<pre>String smallest = strlst.get(0);
for (int i = 1; i &lt; strlist.size(); i++) {
   String nextString = strlst.get(i);
   if ( nextString.compareTo(smallest) &lt; 0 ) 
       smallest = nextString;
}
System.out.println("The smallest string lexicographically is " + smallest);</pre>
<p>If <code>strlst</code> were declared to be of type <classname>ArrayList</classname>,
then the return type of <code>strlst.get(i)</code> would be <classname>Object</classname>
instead of <classname>String</classname>, and a type-cast would be necessary to convert
the returned value to type <classname>String</classname>:</p>
<pre>String smallest = <newcode>(String)</newcode>strlst.get(0);
for (int i = 1; i &lt; strlist.size(); i++) {
   String nextString = <newcode>(String)</newcode>strlst.get(i);
   if ( nextString.compareTo(smallest) &lt; 0 ) 
       smallest = nextString;
}
System.out.println("The smallest string lexicographically is " + smallest);</pre>
<np>Furthermore, it now has to be <b>assumed</b> that every item in the list is in
fact a string, since objects of any type could now be legally stored in <code>strlst</code>.</np>
</ans>
</question>


<question>
<ques><p>What is the purpose of the
following subroutine? What is the meaning of the value that it returns, in
terms of the value of its parameter?</p>
<pre>static String concat( String[] str ) {
   if (str == null)
      return "";
   String ans = "";
   for (int i = 0; i &lt; str.length; i++) {
      ans = ans + str[i];
   return ans;
}</pre>
</ques>
<ans><p>The purpose of the subroutine is
to chain all the strings in an array of strings into one long string. If the
array parameter is null, then there are no strings, and the empty string is
returned. Otherwise, the value returned is the string made up of all the
strings from the array. For example, if <code>stringList</code> is an array
declared as</p>
<pre>String[] stringList = { "Put 'em ",  "all", " together" };</pre>
<p>then the value of <code>concat(stringList)</code> is "Put 'em all together".</p></ans>
</question>


<question>
<ques><p>Show the exact output
produced by the following code segment.</p>
<pre>char[][] pic = new char[6][6];
for (int i = 0; i &lt; 6; i++)
   for (int j = 0; j &lt; 6; j++) {
      if ( i == j  ||  i == 0  ||  i == 5 )
         pic[i][j] = '*';
      else
         pic[i][j] = '.';
   }
for (int i = 0; i &lt; 6; i++) {
   for (int j = 0; j &lt; 6; j++)
      System.out.print(pic[i][j]);
   System.out.println();
}</pre></ques>
<ans><p>The output consists of six
lines, with each line containing six characters. In the first line, <code>i</code>
is 0, so all the characters are *'s. In the last line, i is 5, so all the
characters are *'s. In each of the four lines in the middle, one of the
characters is a * and the rest are periods. The output is</p>
<pre>******
.*....
..*...
...*..
....*.
******</pre>
<p>It might help to look at the array items that are printed on each line. Note
that <code>pic[row][col]</code> is '*' if <code>row</code> is 0 or if <code>row</code> is 5
or if <code>row</code> and <code>col</code> are equal.</p>
<pre>pic[0][0] pic[0][1] pic[0][2] pic[0][3] pic[0][4] pic[0][5] 
pic[1][0] pic[1][1] pic[1][2] pic[1][3] pic[1][4] pic[1][5] 
pic[2][0] pic[2][1] pic[2][2] pic[2][3] pic[2][4] pic[2][5] 
pic[3][0] pic[3][1] pic[3][2] pic[3][3] pic[3][4] pic[3][5] 
pic[4][0] pic[4][1] pic[4][2] pic[4][3] pic[4][4] pic[4][5] 
pic[5][0] pic[5][1] pic[5][2] pic[5][3] pic[5][4] pic[5][5]</pre>
</ans>
</question>


<question>
<ques><p>Write a complete static method
that finds the largest value in an array of <code>ints</code>. The method
should have one parameter, which is an array of type <code>int[]</code>. The
largest number in the array should be returned as the value of the
method.</p></ques>
<ans><p>One possible answer is:</p>
<pre>public static int getMax(int[] list) {
   
   int max = list[0];  // This is the largest item seen so far.
   
   for (int i = 1; i &lt; list.length; i++) {
         // Look at each item in the array.  If the item is
         // bigger than max, then set max equal to the item.
       if (list[i] &gt; max)
          max = list[i];
   }
   
   // At this point, max is the largest item in the whole array.
   
   return max;
   
} // end getMax</pre>
<np>(Note that this method throws an exception if the
parameter <code>list</code> is null or if it is an array of
length&nbsp;0.  The exception is thrown by the line
"<code>int&nbsp;max&nbsp;=&nbsp;list[0];".  The reference
to <code>list[0]</code> causes a <classname>NullPointerException</classname></code>
if <code>list</code> is null and an <classname>ArrayIndexOutOfBoundsException</classname>
if the array has length zero.)</np>
</ans>
</question>

   
<question>
<ques><p>Suppose that temperature
measurements were made on each day of 1999 in each of 100 cities. The
measurements have been stored in an array</p>
<pre>int[][]  temps  =  new  int[100][365];</pre>
<np>where <code>temps[c][d]</code> holds the measurement for city number <code>c</code>
on the <code>d</code><sup>th</sup> day of the year. Write a code segment that will
print out the average temperature, over the course of the whole year, for each
city. The average temperature for a city can be obtained by adding up all 365
measurements for that city and dividing the answer by 365.0.</np></ques>
<ans><p>A pseudocode outline of the
answer is</p>
<pre>For each city {
   Add up all the temperatures for that city
   Divide the total by 365 and print the answer
}</pre>
<np>Adding up all the temperatures for a given city itself requires a for loop,
so the code segment looks like this:</np>
<pre>for (int city = 0; city &lt; 100; city++) {
    int total = 0;  // total of temperatures for this city
    for (int day = 0; day &lt; 365; day++)
       total = total + temps[city][day];
    double avg = total / 365.0;  // average temp for this city
    System.out.println("Average temp for city number " 
             + city + " is " + avg);
}</pre></ans>
</question>


<question>
<ques><p>Suppose that a class,
<classname>Employee,</classname> is defined as follows:</p>
<pre>class Employee {
   String lastName;
   String firstName;
   double hourlyWage;
   int yearsWithCompany;
}</pre>
<np>Suppose that data about 100 employees is <b>already</b> stored in an
array:</np>
<pre>Employee[] employeeData = new Employee[100];</pre>
<np>Write a code segment that will output the first name, last name, and hourly
wage of each employee who has been with the company for 20 years or more.</np></ques>
<ans><p>(The data for the i-th employee
is stored in an object that can be referred to as <code>employeeData[i]</code>. The
four pieces of data about that employee are members of this object and can be
referred to as:</p>
<ul>
<li><code>employeeData[i].firstName</code></li>
<li><code>employeeData[i].lastName</code></li>
<li><code>employeeData[i].hourlyWage</code></li>
<li><code>employeeData[i].yearsWithCompany</code></li>
</ul>
<np>The code segment uses a for loop to consider each employee in the
array.)</np>
<pre>for (int i=0; i &lt; 100; i++) {
    if ( employeeData[i].yearsWithCompany &gt;= 20 )
        System.out.println(employeeData[i].firstName + " " +
                      employeeData[i].lastName + ": " +
                      employeeData[i].hourlyWage);
}</pre>
<np>A for-each loop would also work:</np>
<pre>for ( Employee emp : employeeData ) {
    if ( emp.yearsWithCompany &gt;= 20 )
        System.out.println(emp.firstName + " " +
                      emp.lastName + ": " +
                      emp.hourlyWage);
}</pre>
</ans>
</question>


<question>
<ques><p>Suppose that <code>A</code> has
been declared and initialized with the statement</p>
<pre>double[] A = new double[20];</pre>
<np>and suppose that <code>A</code> has <b>already</b> been filled with 20 values.
Write a program segment that will find the average of all the <b>non-zero</b>
numbers in the array. (The average is the sum of the numbers, divided by the
number of numbers. Note that you will have to count the number of non-zero
entries in the array.) Declare any variables that you use.</np>
</ques>
<ans><p>(There is one problem with this
question. What happens if all the entries in the array <code>A</code> are zero? In
that case, the number of non-zero entries is zero, and the average of non-zero
entries is undefined. In my answer, I assign the "undefined" value, <code>Double.NaN</code>, to the average in
this case, but this is somewhat arbitrary.)</p>
<pre>int nonzeroCt = 0; // The number of non-zero entries in the array.
double total = 0;  // The total of all the grades in the array.
double average;    // The average of the non-zero entries in the array.

for (int i = 0; i &lt; 20; i++) {
   if (A[i] != 0) {       // Process this non-zero entry.
       total += A[i]; // Add it to the total.
       nonzeroCt++;   // Count it.
   }
}

if (nonzeroCt &gt; 0)
   average = total / nonzeroCt;
else   // (The average is undefined in this case)
   average = Double.NaN;</pre>
</ans>
</question>


</quiz>