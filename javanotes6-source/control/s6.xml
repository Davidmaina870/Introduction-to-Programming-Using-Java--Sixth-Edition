<?xml version="1.0" encoding="UTF-8"?>


<section id="control.6" title="The switch Statement">
   
<p><start><big>T</big>he second branching statement</start> in Java is the
<code>switch</code> statement, which is introduced in this section. The
<code>switch</code> statement is used far less often than the <code>if</code> statement, but it
is sometimes useful for expressing a certain type of multi-way branch.</p>

   
<subsection id="control.6.1" title="The Basic switch Statement">

<p>A switch statement allows you to test the value of an expression and,
depending on that value, to jump directly to some location within the switch statement.
Only expressions of certain types can be used.  The value of the expression
can be one of the primitive integer types <ptype>int</ptype>,
<ptype>short</ptype>, or <ptype>byte</ptype>.
It can be the primitive <ptype>char</ptype> type.  Or, as we will see
later in this section, it can be an enumerated type. 
In Java&nbsp;7, <classname>Strings</classname> are also allowed.
In particular, the expression <b>cannot</b> be a real number, and prior to Java&nbsp;7,
it <b>cannot</b> be a <classname>String</classname>. The positions
that you can jump to are marked with <newword>case labels</newword> that take the form: 
"case&nbsp;<bnf>constant</bnf>:". This marks the position the
computer jumps to when the expression evaluates to the given <bnf>constant</bnf>. 
As the final case in a switch statement you can,
optionally, use the label "default:", which provides a default jump point that
is used when the value of the expression is not listed in any case label.</p>

<p>A <code>switch</code> statement, as it is most often used, has the form:</p>

<pre>switch (<bnf>expression</bnf>) {
   case <bnf>constant-1</bnf>:
      <bnf>statements-1</bnf>
      break;
   case <bnf>constant-2</bnf>:
      <bnf>statements-2</bnf>
      break;
      .
      .   // (more cases)
      .
   case <bnf>constant-N</bnf>:
      <bnf>statements-N</bnf>
      break;
   default:  // optional default case
      <bnf>statements-(N+1)</bnf>
} // end of switch statement</pre>

<np>The <code>break</code> statements are technically optional. The effect of a
<code>break</code> is to make the computer jump to the end of the switch statement.
If you leave out the break statement, the computer will just forge ahead after
completing one case and will execute the statements associated with the next
case label. This is rarely what you want, but it is legal. (I will note here&mdash;although 
you won't understand it until you get to the next chapter&mdash;that
inside a subroutine, the <code>break</code> statement is sometimes replaced by a
<code>return</code> statement.)</np>

<p>Note that you can leave out one of the groups of statements entirely
(including the <code>break</code>). You then have two case labels in a row,
containing two different constants. This just means that the computer will jump
to the same place and perform the same action for each of the two
constants.</p>

<p>Here is an example of a switch statement. This is not a useful example, but
it should be easy for you to follow. Note, by the way, that the constants in
the case labels don't have to be in any particular order, as long as they are
all different:</p>

<pre>switch ( N ) {   // (Assume N is an integer variable.)
   case 1:
      System.out.println("The number is 1.");
      break;
   case 2:
   case 4:
   case 8:
      System.out.println("The number is 2, 4, or 8.");
      System.out.println("(That's a power of 2!)");
      break;
   case 3:
   case 6:
   case 9:
      System.out.println("The number is 3, 6, or 9.");
      System.out.println("(That's a multiple of 3!)");
      break;
   case 5:
      System.out.println("The number is 5.");
      break;
   default:
      System.out.println("The number is 7 or is outside the range 1 to 9.");
}</pre>

   
<p>The switch statement is pretty primitive as control structures go, and it's
easy to make mistakes when you use it. Java takes all its control structures
directly from the older programming languages C and C++. The switch statement
is certainly one place where the designers of Java should have introduced some
improvements.</p>

   
   
</subsection>

<subsection id="control.6.2" title="Menus and switch Statements">

<p>One application of <code>switch</code> statements is in processing menus. A menu
is a list of options. The user selects one of the options. The computer has to
respond to each possible choice in a different way. If the options are numbered
1, 2,&nbsp;&dots;, then the number of the chosen option can be used in a
<code>switch</code> statement to select the proper response.</p>

<p>In a <classname>TextIO</classname>-based program, the menu can be presented as a numbered
list of options, and the user can choose an option by typing in its number.
Here is an example that could be used in a variation of the
<code>LengthConverter</code> example from the <localref href="control.5">previous
section</localref>:</p>

<pre>int optionNumber;   // Option number from menu, selected by user.
double measurement; // A numerical measurement, input by the user.
                    //    The unit of measurement depends on which
                    //    option the user has selected.
double inches;      // The same measurement, converted into inches.

/* Display menu and get user's selected option number. */

TextIO.putln("What unit of measurement does your input use?");
TextIO.putln();
TextIO.putln("         1.  inches");
TextIO.putln("         2.  feet");
TextIO.putln("         3.  yards");
TextIO.putln("         4.  miles");
TextIO.putln();
TextIO.putln("Enter the number of your choice: ");
optionNumber = TextIO.getlnInt();

/* Read user's measurement and convert to inches. */

switch ( optionNumber ) {
   case 1:
       TextIO.putln("Enter the number of inches: ");
       measurement = TextIO.getlnDouble();
       inches = measurement;
       break;          
   case 2:
       TextIO.putln("Enter the number of feet: ");
       measurement = TextIO.getlnDouble();
       inches = measurement * 12;
       break;          
   case 3:
       TextIO.putln("Enter the number of yards: ");
       measurement = TextIO.getlnDouble();
       inches = measurement * 36;
       break;          
   case 4:
       TextIO.putln("Enter the number of miles: ");
       measurement = TextIO.getlnDouble();
       inches = measurement * 12 * 5280;
       break;
   default:
       TextIO.putln("Error!  Illegal option number!  I quit!");
       System.exit(1);          
} // end switch

/* Now go on to convert inches to feet, yards, and miles... */</pre>

<np>In Java&nbsp;7, this example might be rewritten using a <classname>String</classname>
in the <code>switch</code> statement:</np>

<pre>String units;       // Unit of measurement, entered by user.
double measurement; // A numerical measurement, input by the user.
double inches;      // The same measurement, converted into inches.

/* Read the user's unit of measurement. */

TextIO.putln("What unit of measurement does your input use?");
TextIO.put("inches, feet, yards, or miles ?");
units = TextIO.getln().toLowerCase();

/* Read user's measurement and convert to inches. */

TextIO.put("Enter the number of " + units + ":  ");
measurement = TextIO.getlnDouble();

switch ( units ) {  <newcode>// Requires Java 7 or higher!</newcode>
   case "inches":
       inches = measurement;
       break;          
   case "feet":
       inches = measurement * 12;
       break;          
   case "yards":
       inches = measurement * 36;
       break;          
   case "miles":
       inches = measurement * 12 * 5280;
       break;
   default:
       TextIO.putln("Wait a minute!  Illegal unit of measure!  I quit!");
       System.exit(1);          
} // end switch</pre>

   
</subsection>

<subsection id="control.6.3" title="Enums in switch Statements">
   
<p>The type of the expression in a <code>switch</code> can be an enumerated
type.  In that case, the constants in the <code>case</code> labels must
be values from the enumerated type.  For example, if the type of
the expression is the enumerated type <classname>Season</classname>
defined by</p>

<pre>enum Season { SPRING, SUMMER, FALL, WINTER }</pre>

<np>then the constants in the case label must be chosen from among
the values <code>Season.SPRING</code>, <code>Season.SUMMER</code>, <code>Season.FALL</code>, or
<code>Season.WINTER</code>.  However, there is another quirk in the syntax:
when an enum constant is used in a <code>case</code> label, only the simple name,
such as "<code>SPRING</code>" can be used, not the full name "<code>Season.SPRING</code>".
Of course, the computer already knows that the value in the <code>case</code> label
must belong to the enumerated type, since it can tell that from the type of expression
used, so there is really no need to specify the type name in the constant.  As an
example, suppose that <code>currentSeason</code> is a variable of type
<classname>Season</classname>.  Then we could have the <code>switch</code> statement:</np>
  
<pre>switch ( currentSeason ) {
   case WINTER:    // ( NOT Season.WINTER ! )
      System.out.println("December, January, February");
      break;
   case SPRING:
      System.out.println("March, April, May");
      break;
   case SUMMER:
      System.out.println("June, July, August");
      break;
   case FALL:
      System.out.println("September, October, November");
      break;
}</pre>
</subsection>

<subsection id="control.6.4" title="Definite Assignment">
   
<p>As a somewhat more realistic example, the following <code>switch</code> statement
makes a random choice among three possible alternatives.  Recall that the
value of the expression <code>(int)(3*Math.random())</code> is one of the
integers 0, 1, or 2, selected at random with equal probability, so the
<code>switch</code> statement below will assign one of the values
<code>"Rock"</code>, <code>"Scissors"</code>, <code>"Paper"</code> to <code>computerMove</code>,
with probability 1/3 for each case.   Although
the switch statement in this example is correct, this code segment as a
whole illustrates a subtle syntax error that sometimes comes up:</p>

<pre>String computerMove;
switch ( (int)(3*Math.random()) ) {
   case 0:
      computerMove = "Rock";
      break;
   case 1:
      computerMove = "Scissors";
      break;
   case 2:
      computerMove = "Paper";
      break;
}
System.out.println("Computer's move is " + computerMove);   // ERROR!</pre>
   
<p>You probably haven't spotted the error, since it's not an error
from a human point of view.  The computer reports the last line to be
an error, because the variable <code>computerMove</code> might not have
been assigned a value.  In Java, it is only legal to use the value
of a variable if a value has already been <newword>definitely assigned</newword>
to that variable.  This means that the computer must be able to prove, just
from looking at the code when the program is compiled, that the variable
must have been assigned a value.  Unfortunately, the computer only
has a few simple rules that it can apply to make the determination.
In this case, it sees a <code>switch</code> statement in which the
type of expression is <ptype>int</ptype> and in which the cases that
are covered are 0, 1, and 2.  For other values of the expression,
<code>computerMove</code> is never assigned a value.  So, the computer
thinks <code>computerMove</code> might still be undefined after
the <code>switch</code> statement.  Now, in fact, this isn't true:
0, 1, and 2 are actually the only possible values of the expression
<code>(int)(3*Math.random())</code>, but the computer isn't smart
enough to figure that out.  The easiest way to fix the problem
is to replace the case label <code>case&nbsp;2</code> with
<code>default</code>.  The computer can then see that a value
is assigned to <code>computerMove</code> in all cases.</p>

<p>More generally, we say that a value has been definitely assigned
to a variable at a given point in a program if every execution
path leading from the declaration of the variable to that point in the
code includes an assignment to the variable.  This rule takes into
account loops and <code>if</code> statements as well as <code>switch</code>
statements.  For example, the following two <code>if</code> statements
both do the same thing as the <code>switch</code> statement given
above, but only the one on the right definitely assigns a value
to <code>computerMove</code>:</p>

<pre>String computerMove;                     String computerMove;
int rand;                                int rand;
rand = (int)(3*Math.random());           rand = (int)(3*Math.random());
if ( rand == 0 )                         if ( rand == 0 )
   computerMove = "Rock";                   computerMove = "Rock";
else if ( rand == 1 )                    else if ( rand == 1 )
   computerMove = "Scissors";               computerMove = "Scissors";
else <newcode>if ( rand == 2 )</newcode>                    else
   computerMove = "Paper";                  computerMove = "Paper";</pre>
   
<np>In the code on the left, the test "<code>if&nbsp;(&nbsp;rand&nbsp;==&nbsp;2&nbsp;)</code>" 
in the final <code>else</code> clause
is unnecessary because if <code>rand</code> is not 0 or 1, the only remaining
possibility is that <code>rand&nbsp;==&nbsp;2</code>.  The computer, however, can't
figure that out.</np>

</subsection>
   
</section>